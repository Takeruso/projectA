import{_ as s,c as t,a as e,b as i,u as a,i as n,v as l,q as d,F as c,l as r,t as o,f,e as h,m as u}from"./index-DNfTXETz.js";const g={class:"container"},v={class:"shifts-section"},m={class:"controls-bar"},y={class:"date-selector"},b={class:"tabs"},A={key:0,class:"tab-content"},p={class:"staff-list"},S={class:"staff-info"},k={class:"staff-avatar"},w={class:"staff-details"},D={class:"hours-info"},C={class:"availability-grid"},R={class:"grid-header"},T={class:"grid-body"},M={class:"shift-time"},L=["onUpdate:modelValue"],I={class:"staff-actions"},_=["onClick"],H={key:0,class:"load-more"},$={key:1,class:"tab-content"},F={class:"shift-calendar"},W={class:"calendar-header"},O={class:"day-name"},E={class:"day-date"},N={class:"calendar-body"},j={class:"time-slot"},x=["onClick"],P={key:0,class:"assigned-staff"},U=["title"],z={key:1,class:"no-staff"},J={key:2,class:"tab-content"},Y={class:"overview-stats"},V={class:"stat-card"},q={class:"stat-value"},G={class:"stat-card"},B={class:"stat-value"},K={class:"stat-card"},Q={class:"stat-value"},X={class:"staff-hours-table"},Z={key:3,class:"tab-content"},ss={class:"controls-bar"},ts={class:"date-selector"},es={key:0,class:"empty-state"},is={key:1,class:"empty-state"},as={key:2,class:"resident-assignment-container"},ns={class:"resident-assignment-grid"},ls={class:"staff-column"},ds={class:"staff-list-sidebar"},cs=["onClick"],rs={class:"staff-avatar"},os={class:"staff-item-details"},fs={class:"shift-info"},hs={class:"resident-column"},us={key:0,class:"empty-state small"},gs={class:"assignment-count"},vs={class:"resident-search"},ms={class:"resident-list"},ys=["onClick"],bs={class:"resident-item-info"},As={class:"resident-name"},ps={class:"resident-details"},Ss={class:"room-number"},ks={class:"care-level"},ws={class:"resident-assignment-status"},Ds={key:0},Cs={key:1},Rs={class:"assignment-actions"},Ts={key:0,id:"assignmentModal",class:"modal"},Ms={class:"modal-content"},Ls={class:"shift-details"},Is={class:"available-staff-list"},_s=["onClick"],Hs={class:"staff-avatar small"},$s={class:"staff-details"},Fs={class:"hours-info"},Ws={class:"selection-indicator"},Os={key:0},Es={class:"modal-actions"},Ns={key:1,id:"assignmentSuccessModal",class:"modal"},js={class:"modal-content small"},xs={class:"modal-actions"};const Ps=s({data(){return{activeTab:"availability",displayedStaffCount:10,selectedWeek:this.getCurrentWeek(),weekDays:[],staffList:[],selectedResidentDate:"",assignedStaffForDate:[],selectedStaffId:null,residentSearch:"",residentList:[],residentAssignments:{},showAssignmentSuccessModal:!1,shifts:[{id:"shift1",label:"00:00 - 06:00"},{id:"shift2",label:"06:00 - 12:00"},{id:"shift3",label:"12:00 - 18:00"},{id:"shift4",label:"18:00 - 24:00"}],shiftAssignments:{},showAssignmentModal:!1,currentAssignment:{date:"",shiftId:""},assignments:{},weekAvailability:{}}},async created(){await this.fetchStaffList(),this.updateWeekDays(),await this.fetchAssignments(),await this.fetchResidentList()},methods:{getCurrentWeek(){const s=new Date,t=s.getFullYear();(s.getMonth()+1).toString().padStart(2,"0"),s.getDate().toString().padStart(2,"0");return`${t}-W${this.getWeekNumber(s)}`},getWeekNumber(s){const t=new Date(s.getFullYear(),0,1),e=(s-t)/864e5;return Math.ceil((e+t.getDay()+1)/7)},async fetchResidentList(){try{const s=await fetch("/api/patients"),t=await s.json();this.residentList=t}catch(s){console.error("Failed to fetch residents:",s)}},async fetchAssignedStaffForDate(){if(!this.selectedResidentDate)return;const s=[],t=this.shiftAssignments[this.selectedResidentDate];if(t){for(const e in t){const i=t[e];for(const t of i){const i=this.staffList.find((s=>s.id===t));i&&s.push({...i,shiftId:e,shiftLabel:this.getShiftLabel(e)})}}this.assignedStaffForDate=s}else this.assignedStaffForDate=[]},selectStaff(s){this.selectedStaffId=s},isResidentAssigned(s,t){var e,i;return null==(i=null==(e=this.residentAssignments[this.selectedResidentDate])?void 0:e[t])?void 0:i.includes(s)},toggleResidentAssignment(s,t){this.residentAssignments[this.selectedResidentDate]||(this.residentAssignments[this.selectedResidentDate]={}),this.residentAssignments[this.selectedResidentDate][t]||(this.residentAssignments[this.selectedResidentDate][t]=[]);const e=this.residentAssignments[this.selectedResidentDate][t],i=e.indexOf(s);-1!==i||this.isOverCapacity(t)?-1!==i&&e.splice(i,1):e.push(s)},getAssignedResidentCount(s){var t,e;return(null==(e=null==(t=this.residentAssignments[this.selectedResidentDate])?void 0:t[s])?void 0:e.length)||0},getMaxResidentCapacity:s=>4,isOverCapacity(s){return this.getAssignedResidentCount(s)>=this.getMaxResidentCapacity(s)},updateWeekDays(){this.weekDays=[];const[s,t]=this.selectedWeek.split("-W"),e=new Date(s,0,1+7*(t-1)),i=e.getDay(),a=0===i?6:i-1,n=new Date(e);n.setDate(e.getDate()-a);for(let l=0;l<7;l++){const s=new Date(n);s.setDate(n.getDate()+l);const t=this.formatDateYMD(s),e=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],i=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"];this.weekDays.push({date:t,name:e[l],short:i[l]})}this.initializeAvailability(),this.initializeAssignments()},formatDateYMD:s=>`${s.getFullYear()}-${(s.getMonth()+1).toString().padStart(2,"0")}-${s.getDate().toString().padStart(2,"0")}`,formatDate(s){if(!s)return"";const[t,e,i]=s.split("-");return`${e}/${i}/${t}`},initializeAvailability(){Array.isArray(this.staffList)?(this.weekAvailability={},this.weekDays.forEach((s=>{this.weekAvailability[s.date]={},this.shifts.forEach((t=>{this.weekAvailability[s.date][t.id]={},this.staffList.forEach((e=>{this.weekAvailability[s.date][t.id][e.id]=!1}))}))}))):console.warn("initializeAvailability skipped: staffList is not an array")},initializeAssignments(){this.weekDays&&0!==this.weekDays.length?this.weekDays.forEach((s=>{this.shiftAssignments[s.date]||(this.shiftAssignments[s.date]={},this.shifts.forEach((t=>{this.shiftAssignments[s.date][t.id]=[]})))})):console.warn("initializeAssignments skipped: weekDays is undefined or empty")},updateAvailability(s,t,e){const i=s.availability[t][e],a=i.id;a?fetch(`/api/availability/${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({is_available:i.is_available})}):fetch("/api/availability",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({staff_id:s.id,date:t,shift_id:e,is_available:i.is_available})}).then((s=>s.json())).then((s=>{i.id=s.id}))},async saveStaffAvailability(s){for(const e of this.weekDays)for(const i of this.shifts){const a=s.availability[e.date][i.id];if(void 0!==a)try{if(a.id)await fetch(`/api/availability/${a.id}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({is_available:a.is_available})});else{const t=await fetch("/api/availability",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({staff_id:s.id,date:e.date,shift_id:i.id,is_available:a.is_available})}),n=await t.json();a.id=n.id}}catch(t){console.error("Error saving individual availability:",t)}}alert("Availability saved successfully!")},getInitials:s=>s?s.split(" ").map((s=>s[0])).join(""):"",openAssignmentModal(s,t){this.currentAssignment={date:s,shiftId:t},this.showAssignmentModal=!0},closeAssignmentModal(){this.showAssignmentModal=!1},getShiftLabel(s){const t=this.shifts.find((t=>t.id===s));return t?t.label:""},getAvailableStaff(s,t){return this.staffList.filter((e=>e.availability&&e.availability[s]&&e.availability[s][t]&&e.availability[s][t].is_available))},isStaffAssigned(s,t,e){return!(!this.shiftAssignments[t]||!this.shiftAssignments[t][e])&&this.shiftAssignments[t][e].includes(s)},toggleStaffAssignment(s,t,e){this.shiftAssignments[t]||(this.shiftAssignments[t]={}),this.shiftAssignments[t][e]||(this.shiftAssignments[t][e]=[]);const i=this.shiftAssignments[t][e].indexOf(s);-1===i?this.shiftAssignments[t][e].push(s):this.shiftAssignments[t][e].splice(i,1)},async saveAssignments(){try{for(const s in this.shiftAssignments)for(const t in this.shiftAssignments[s]){const e=this.shiftAssignments[s][t];for(const i of e){const e=await fetch("/api/assignment",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({staff_id:i,date:s,shift_id:t})});if(e.ok);else{const a=await e.text();console.warn(`Skipping duplicate assignment for staff ${i} on ${s} shift ${t}: ${a}`)}}}alert("All assignments saved successfully!")}catch(s){console.error("Error saving assignments:",s),alert(`An error occurred: ${s.message}`)}this.closeAssignmentModal()},getAssignedStaff(s,t){return this.shiftAssignments[s]&&this.shiftAssignments[s][t]?this.shiftAssignments[s][t]:[]},getStaffName(s){const t=this.staffList.find((t=>t.id===s));return t?t.name:""},getStaffAssignedHours(s){let t=0;for(const e in this.shiftAssignments)for(const i in this.shiftAssignments[e])this.shiftAssignments[e][i].includes(s)&&(t+=6);return t},getHoursStatusClass(s){const t=this.staffList.find((t=>t.id===s));if(!t)return"";const e=this.getStaffAssignedHours(s),i=t.preferredHours;return e<.8*i?"under":e>1.1*i?"over":"good"},getHoursStatusText(s){switch(this.getHoursStatusClass(s)){case"under":return"Underutilized";case"over":return"Overutilized";case"good":return"Good";default:return""}},getTotalAssignedShifts(){let s=0;for(const t in this.shiftAssignments)for(const e in this.shiftAssignments[t])s+=this.shiftAssignments[t][e].length;return s},getUncoveredShifts(){let s=0;for(const t in this.shiftAssignments)for(const e in this.shiftAssignments[t])0===this.shiftAssignments[t][e].length&&s++;return s},getAverageHoursPerStaff(){if(0===this.staffList.length)return 0;let s=0;return this.staffList.forEach((t=>{s+=this.getStaffAssignedHours(t.id)})),Math.round(s/this.staffList.length)},publishSchedule(){alert("Schedule published successfully! Staff have been notified.")},async fetchStaffList(){try{const s=await fetch("/api/staffFull/full"),t=await s.json();if(console.log("STAFF DATA:",t),!Array.isArray(t))return void console.error("FETCHED DATA IS NOT AN ARRAY!",t);this.staffList=t.map((s=>({id:s.id,name:`${s.first_name} ${s.last_name}`,role:s.role,preferredHours:s.preferred_hours||40,availability:s.availability||{}})));this.updateWeekDays(),this.staffList.forEach((s=>{s.availability||(s.availability={}),this.weekDays.forEach((t=>{s.availability[t.date]||(s.availability[t.date]={}),this.shifts.forEach((e=>{s.availability[t.date][e.id]||(s.availability[t.date][e.id]={is_available:!1,id:null})}))}))}))}catch(s){console.error("Failed to fetch staff list:",s)}},async fetchAssignments(){try{const s=await fetch("/api/assignment"),t=await s.json();this.shiftAssignments=this.transformAssignments(t)}catch(s){console.error("Failed to fetch assignments:",s)}},transformAssignments(s){const t={};return s.forEach((s=>{const e=s.date,i=s.shift_id,a=s.staff_id;t[e]||(t[e]={}),t[e][i]||(t[e][i]=[]),t[e][i].includes(a)||t[e][i].push(a)})),t}},computed:{filteredResidents(){const s=this.residentSearch.toLowerCase();return this.residentList.filter((t=>t.name.toLowerCase().includes(s)))}}},[["render",function(s,Ps,Us,zs,Js,Ys){return h(),t("div",null,[Ps[49]||(Ps[49]=e('<header data-v-4894ebc3><div class="container header-container" data-v-4894ebc3><div class="logo" data-v-4894ebc3><span data-v-4894ebc3>Swin Care</span></div><div class="user-info" data-v-4894ebc3><button class="notifications-btn" data-v-4894ebc3> 📋 <span class="alert-count" data-v-4894ebc3>2</span></button><div class="user-name" data-v-4894ebc3>Martha Johnson</div><div class="user-avatar" data-v-4894ebc3>MJ</div></div></div></header>',1)),i("main",g,[i("div",v,[Ps[40]||(Ps[40]=i("h1",null,"Staff Shift Management",-1)),Ps[41]||(Ps[41]=i("p",null," Manage staff availability and assign shifts to ensure proper coverage at all times. ",-1)),i("div",m,[i("div",y,[Ps[16]||(Ps[16]=i("label",{for:"week-selector"},"Select Week:",-1)),n(i("input",{type:"week",id:"week-selector","onUpdate:modelValue":Ps[0]||(Ps[0]=s=>Js.selectedWeek=s),onChange:Ps[1]||(Ps[1]=(...s)=>Ys.updateWeekDays&&Ys.updateWeekDays(...s))},null,544),[[l,Js.selectedWeek]])]),i("button",{class:"publish-btn",onClick:Ps[2]||(Ps[2]=(...s)=>Ys.publishSchedule&&Ys.publishSchedule(...s))}," Publish Schedule ")]),i("div",b,[i("button",{class:d(["tab-btn",{active:"availability"===Js.activeTab}]),onClick:Ps[3]||(Ps[3]=s=>Js.activeTab="availability")}," Staff Availability ",2),i("button",{class:d(["tab-btn",{active:"shifts"===Js.activeTab}]),onClick:Ps[4]||(Ps[4]=s=>Js.activeTab="shifts")}," Shift Assignments ",2),i("button",{class:d(["tab-btn",{active:"overview"===Js.activeTab}]),onClick:Ps[5]||(Ps[5]=s=>Js.activeTab="overview")}," Weekly Overview ",2),i("button",{class:d(["tab-btn",{active:"residents"===Js.activeTab}]),onClick:Ps[6]||(Ps[6]=s=>Js.activeTab="residents")}," Resident Assignments ",2)]),"availability"===Js.activeTab?(h(),t("div",A,[Ps[19]||(Ps[19]=i("h2",null,"Staff Availability",-1)),i("div",p,[(h(!0),t(c,null,r(Js.staffList.slice(0,Js.displayedStaffCount),((s,e)=>(h(),t("div",{key:s.id,class:"staff-card"},[i("div",S,[i("div",k,o(Ys.getInitials(s.name)),1),i("div",w,[i("h3",null,o(s.name),1),i("p",null,o(s.role),1),i("p",D," Preferred Hours: "+o(s.preferredHours)+" hrs/week ",1)])]),i("div",C,[i("div",R,[Ps[17]||(Ps[17]=i("span",null,null,-1)),(h(!0),t(c,null,r(Js.weekDays,(s=>(h(),t("span",{key:s.date},o(s.short),1)))),128))]),i("div",T,[(h(!0),t(c,null,r(Js.shifts,(e=>(h(),t("div",{key:e.id,class:"grid-row"},[i("span",M,o(e.label),1),(h(!0),t(c,null,r(Js.weekDays,(l=>(h(),t("label",{key:`${s.id}-${l.date}-${e.id}`,class:"availability-cell"},[s.availability&&s.availability[l.date]&&s.availability[l.date][e.id]?n((h(),t("input",{key:0,type:"checkbox","onUpdate:modelValue":t=>s.availability[l.date][e.id].is_available=t},null,8,L)),[[u,s.availability[l.date][e.id].is_available]]):a("",!0),Ps[18]||(Ps[18]=i("span",{class:"checkmark"},null,-1))])))),128))])))),128))])]),i("div",I,[i("button",{class:"cta",onClick:t=>Ys.saveStaffAvailability(s)}," Save Changes ",8,_)])])))),128))]),Js.displayedStaffCount<Js.staffList.length?(h(),t("div",H,[i("button",{onClick:Ps[7]||(Ps[7]=s=>Js.displayedStaffCount+=10)},"Show More")])):a("",!0)])):a("",!0),"shifts"===Js.activeTab?(h(),t("div",$,[Ps[22]||(Ps[22]=i("h2",null,"Shift Assignments",-1)),i("div",F,[i("div",W,[Ps[20]||(Ps[20]=i("div",{class:"time-column"},null,-1)),(h(!0),t(c,null,r(Js.weekDays,(s=>(h(),t("div",{key:s.date,class:"day-column"},[i("div",O,o(s.short),1),i("div",E,o(s.date),1)])))),128))]),i("div",N,[(h(!0),t(c,null,r(Js.shifts,(s=>(h(),t("div",{key:s.id,class:"shift-row"},[i("div",j,o(s.label),1),(h(!0),t(c,null,r(Js.weekDays,(e=>(h(),t("div",{key:`${e.date}-${s.id}`,class:"assignment-cell",onClick:t=>Ys.openAssignmentModal(e.date,s.id)},[Ys.getAssignedStaff(e.date,s.id).length>0?(h(),t("div",P,[(h(!0),t(c,null,r(Ys.getAssignedStaff(e.date,s.id),(s=>(h(),t("div",{key:`assigned-${s}`,class:"assigned-badge",title:Ys.getStaffName(s)},o(Ys.getInitials(Ys.getStaffName(s))),9,U)))),128))])):(h(),t("div",z,Ps[21]||(Ps[21]=[i("span",null,"+",-1)])))],8,x)))),128))])))),128))])])])):a("",!0),"overview"===Js.activeTab?(h(),t("div",J,[Ps[31]||(Ps[31]=i("h2",null,"Weekly Overview",-1)),i("div",Y,[i("div",V,[Ps[23]||(Ps[23]=i("div",{class:"stat-icon"},"👥",-1)),i("div",q,o(Ys.getTotalAssignedShifts()),1),Ps[24]||(Ps[24]=i("div",{class:"stat-label"},"Total Shifts Assigned",-1))]),i("div",G,[Ps[25]||(Ps[25]=i("div",{class:"stat-icon"},"⚠️",-1)),i("div",B,o(Ys.getUncoveredShifts()),1),Ps[26]||(Ps[26]=i("div",{class:"stat-label"},"Uncovered Shifts",-1))]),i("div",K,[Ps[27]||(Ps[27]=i("div",{class:"stat-icon"},"⏱️",-1)),i("div",Q,o(Ys.getAverageHoursPerStaff()),1),Ps[28]||(Ps[28]=i("div",{class:"stat-label"},"Avg Hours per Staff",-1))])]),i("div",X,[Ps[30]||(Ps[30]=i("h3",null,"Staff Hours This Week",-1)),i("table",null,[Ps[29]||(Ps[29]=i("thead",null,[i("tr",null,[i("th",null,"Staff Member"),i("th",null,"Role"),i("th",null,"Assigned Hours"),i("th",null,"Preferred Hours"),i("th",null,"Status")])],-1)),i("tbody",null,[(h(!0),t(c,null,r(Js.staffList,((s,e)=>(h(),t("tr",{key:e},[i("td",null,o(s.name),1),i("td",null,o(s.role),1),i("td",null,o(Ys.getStaffAssignedHours(s.id)),1),i("td",null,o(s.preferredHours),1),i("td",null,[i("span",{class:d(["hours-status",Ys.getHoursStatusClass(s.id)])},o(Ys.getHoursStatusText(s.id)),3)])])))),128))])])])])):a("",!0),"residents"===Js.activeTab?(h(),t("div",Z,[Ps[38]||(Ps[38]=i("h2",null,"Resident Care Assignments",-1)),Ps[39]||(Ps[39]=i("p",null," Assign residents to scheduled staff members to ensure proper care coverage. ",-1)),i("div",ss,[i("div",ts,[Ps[32]||(Ps[32]=i("label",{for:"resident-date-selector"},"Select Date:",-1)),n(i("input",{type:"date",id:"resident-date-selector","onUpdate:modelValue":Ps[8]||(Ps[8]=s=>Js.selectedResidentDate=s),onChange:Ps[9]||(Ps[9]=(...s)=>Ys.fetchAssignedStaffForDate&&Ys.fetchAssignedStaffForDate(...s))},null,544),[[l,Js.selectedResidentDate]])])]),Js.selectedResidentDate?0===Js.assignedStaffForDate.length?(h(),t("div",is,Ps[34]||(Ps[34]=[i("div",{class:"empty-state-icon"},"👥",-1),i("p",null," No staff scheduled for this date. Please assign staff to shifts before making resident assignments. ",-1)]))):(h(),t("div",as,[i("div",ns,[i("div",ls,[Ps[35]||(Ps[35]=i("h3",null,"Staff Members",-1)),i("div",ds,[(h(!0),t(c,null,r(Js.assignedStaffForDate,(s=>(h(),t("div",{key:s.id,class:d(["staff-item",{active:Js.selectedStaffId===s.id}]),onClick:t=>Ys.selectStaff(s.id)},[i("div",rs,o(Ys.getInitials(s.name)),1),i("div",os,[i("h4",null,o(s.name),1),i("p",null,o(s.role),1),i("p",fs,o(s.shiftLabel),1)])],10,cs)))),128))])]),i("div",hs,[Js.selectedStaffId?(h(),t(c,{key:1},[i("h3",null,[Ps[37]||(Ps[37]=f(" Assign Residents ")),i("span",gs,o(Ys.getAssignedResidentCount(Js.selectedStaffId))+"/"+o(Ys.getMaxResidentCapacity(Js.selectedStaffId)),1)]),i("div",vs,[n(i("input",{type:"text","onUpdate:modelValue":Ps[10]||(Ps[10]=s=>Js.residentSearch=s),placeholder:"Search residents...",class:"search-input"},null,512),[[l,Js.residentSearch]])]),i("div",ms,[(h(!0),t(c,null,r(Ys.filteredResidents,(s=>(h(),t("div",{key:s.id,class:d(["resident-item",{assigned:Ys.isResidentAssigned(s.id,Js.selectedStaffId),"over-capacity":Ys.isOverCapacity(Js.selectedStaffId)&&!Ys.isResidentAssigned(s.id,Js.selectedStaffId)}]),onClick:t=>Ys.toggleResidentAssignment(s.id,Js.selectedStaffId)},[i("div",bs,[i("div",As,o(s.name),1),i("div",ps,[i("span",Ss,"Room "+o(s.room),1),i("span",ks,o(s.careLevel)+" Care",1)])]),i("div",ws,[Ys.isResidentAssigned(s.id,Js.selectedStaffId)?(h(),t("span",Ds,"✓")):(h(),t("span",Cs,"+"))])],10,ys)))),128))]),i("div",Rs,[i("button",{class:"cta",onClick:Ps[11]||(Ps[11]=(...t)=>s.saveResidentAssignments&&s.saveResidentAssignments(...t))}," Save Assignments ")])],64)):(h(),t("div",us,Ps[36]||(Ps[36]=[i("p",null,"Select a staff member to assign residents",-1)])))])])])):(h(),t("div",es,Ps[33]||(Ps[33]=[i("div",{class:"empty-state-icon"},"📅",-1),i("p",null,"Please select a date to view and manage resident assignments",-1)])))])):a("",!0)])]),Ps[50]||(Ps[50]=i("footer",null,null,-1)),Js.showAssignmentModal?(h(),t("div",Ts,[i("div",Ms,[i("span",{class:"close",onClick:Ps[12]||(Ps[12]=(...s)=>Ys.closeAssignmentModal&&Ys.closeAssignmentModal(...s))},"×"),Ps[44]||(Ps[44]=i("h2",null,"Assign Staff to Shift",-1)),i("div",Ls,[i("p",null,[Ps[42]||(Ps[42]=i("strong",null,"Date:",-1)),f(" "+o(Ys.formatDate(Js.currentAssignment.date)),1)]),i("p",null,[Ps[43]||(Ps[43]=i("strong",null,"Shift Time:",-1)),f(" "+o(Ys.getShiftLabel(Js.currentAssignment.shiftId)),1)])]),Ps[45]||(Ps[45]=i("h3",null,"Available Staff",-1)),i("div",Is,[(h(!0),t(c,null,r(Ys.getAvailableStaff(Js.currentAssignment.date,Js.currentAssignment.shiftId),(s=>(h(),t("div",{key:s.id,class:d(["available-staff-item",{selected:Ys.isStaffAssigned(s.id,Js.currentAssignment.date,Js.currentAssignment.shiftId)}]),onClick:t=>Ys.toggleStaffAssignment(s.id,Js.currentAssignment.date,Js.currentAssignment.shiftId)},[i("div",Hs,o(Ys.getInitials(s.name)),1),i("div",$s,[i("h4",null,o(s.name),1),i("p",null,o(s.role),1),i("p",Fs," Current hours: "+o(Ys.getStaffAssignedHours(s.id))+" / "+o(s.preferredHours),1)]),i("div",Ws,[Ys.isStaffAssigned(s.id,Js.currentAssignment.date,Js.currentAssignment.shiftId)?(h(),t("span",Os,"✓")):a("",!0)])],10,_s)))),128))]),i("div",Es,[i("button",{class:"cta",onClick:Ps[13]||(Ps[13]=(...s)=>Ys.saveAssignments&&Ys.saveAssignments(...s))},"Save Assignments")])])])):a("",!0),Js.showAssignmentSuccessModal?(h(),t("div",Ns,[i("div",js,[i("span",{class:"close",onClick:Ps[14]||(Ps[14]=(...t)=>s.closeAssignmentSuccessModal&&s.closeAssignmentSuccessModal(...t))},"×"),Ps[46]||(Ps[46]=i("div",{class:"success-icon"},"✓",-1)),Ps[47]||(Ps[47]=i("h2",null,"Assignments Saved!",-1)),Ps[48]||(Ps[48]=i("p",null,"Resident care assignments have been successfully saved.",-1)),i("div",xs,[i("button",{class:"cta",onClick:Ps[15]||(Ps[15]=(...t)=>s.closeAssignmentSuccessModal&&s.closeAssignmentSuccessModal(...t))}," Close ")])])])):a("",!0)])}],["__scopeId","data-v-4894ebc3"]]);export{Ps as default};
